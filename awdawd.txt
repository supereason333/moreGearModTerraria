			offsetNum++;
            switch (offsetNum)
            {
                case 1:
                    rotation = (float)Math.Atan2((double)velocity.Y, (double)velocity.X) + -90;
                    break;
                case 2:
                    rotation = (float)Math.Atan2((double)velocity.Y, (double)velocity.X);
                    break;
                case 3:
                    rotation = (float)Math.Atan2((double)velocity.Y, (double)velocity.X) + 90;
                    offsetNum = 0;
                    break;
            }
			offset = new Vector2((float)Math.Cos(rotation) * offsetWidth, (float)Math.Sin(rotation) * offsetWidth);
			position += offset;




source, newPosition, Projectile.velocity, ModContent.ProjectileType<GlowSwordProjectile>(), Projectile.damage, Projectile.knockBack, ModContent.ProjectileType<GlowSwordProjectile>(), ai0:0 



basic whip projectile under pre draw
            SpriteEffects flip = Projectile.spriteDirection < 0 ? SpriteEffects.None : SpriteEffects.FlipHorizontally;

            Main.instance.LoadProjectile(Type);
            Texture2D texture = TextureAssets.Projectile[Type].Value;

            Vector2 pos = list[0];

            for (int i = 0; i < list.Count - 1; i++)
            {
                Rectangle frame = new Rectangle(0, 0, 10, 26);
                Vector2 origin = new Vector2(5, 8);
                float scale = 1;

                if (i == list.Count - 2)
                {
                    frame.Y = 74;
                    frame.Height = 18;

                    Projectile.GetWhipSettings(Projectile, out float timeToFlyOut, out int _, out float _);
                    float t = Timer / timeToFlyOut;
                    scale = MathHelper.Lerp(0.5f, 1.5f, Utils.GetLerpValue(0.1f, 0.7f, t, true) * Utils.GetLerpValue(0.9f, 0.7f, t, true));
                }
                else if (i > 10)
                {
                    frame.Y = 58;
                    frame.Height = 16;
                }
                else if (i > 5)
                {
                    frame.Y = 42;
                    frame.Height = 16;
                }
                else if (i > 0)
                {
                    frame.Y = 26;
                    frame.Height = 16;
                }

                Vector2 element = list[i];
                Vector2 diff = list[i + 1] - element;

                float rotation = diff.ToRotation() - MathHelper.PiOver2; // This projectile's sprite faces down, so PiOver2 is used to correct rotation.
                Color color = Lighting.GetColor(element.ToTileCoordinates());

                Main.EntitySpriteDraw(texture, pos - Main.screenPosition, frame, color, rotation, origin, scale, flip, 0);

                pos += diff;
            }